import Head from "next/head";
import { useEffect, useState } from "react";
import TranslationInput from "../components/TranslationInput";
import { generateJson } from "../utils/generateJson";
import supabase from "../utils/supabase";

export default function Home() {
  const [loaded, setLoaded] = useState<boolean>(false);

  const [namespaces, setNamespaces] = useState<any[]>([]);
  const [activeNamespace, setActiveNamespace] = useState<any>(namespaces[0]);

  const [keys, setKeys] = useState<any[]>([]);
  const [activeKey, setActiveKey] = useState<any>({});

  useEffect(() => {
    (async () =>
      await supabase
        .from("keys")
        .select("*")
        .then((res: any) => {
          console.log(res);
          const _ns = [...new Set(res.data.map((r: any) => r.namespace))];
          const _keys = res.data.map((r: any) => ({
            key: r.key,
            ns: r.namespace,
            translations: r.translations,
            id: r.id,
          }));

          setNamespaces(_ns);
          setActiveNamespace(_ns[0]);
          setKeys(_keys);
          setActiveKey(_keys.find((n: any) => n.ns === _ns[0]));
          setLoaded(true);

          console.log(_keys);
        }))();
  }, []);

  return (
    <>
      <Head>
        <title>i18n-manager</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="fixed h-screen w-screen bg-zinc-900 text-white">
        <div className="flex flex-col h-full">
          <div className="flex flex-grow overflow-y-scroll">
            {loaded && (
              <>
                <div className="h-full w-10 bg-zinc-900 border-r border-zinc-700"></div>
                <div className="h-full w-36 border-r border-zinc-700">
                  <h1 className="flex items-center justify-center font-bold text-sm border-b border-zinc-800 uppercase font-mono p-1 border-b border-zinc-700">
                    Namespace
                  </h1>
                  <div className="flex items-center flex-col">
                    {namespaces.map((k) => (
                      <div
                        key={k}
                        onClick={() => setActiveNamespace(k)}
                        style={{ fontSize: 10 }}
                        className={`hover:bg-zinc-800 border-b border-zinc-700 ${
                          activeNamespace === k && "bg-zinc-800"
                        } rounded-sm w-full flex items-center p-1 cursor-pointer font-mono`}
                      >
                        {k}
                      </div>
                    ))}
                  </div>
                </div>
                <div className="h-full w-44 border-r border-zinc-700 flex flex-col">
                  <h1 className="flex items-center justify-center font-bold text-sm border-b border-zinc-800 uppercase font-mono p-1 border-b border-zinc-700">
                    Keys
                  </h1>
                  <div className="flex flex-grow items-center flex-col overflow-y-scroll">
                    {keys
                      .filter((k) => k.ns === activeNamespace)
                      .map((k) => (
                        <div
                          key={k.key}
                          onClick={() => {
                            setActiveKey(k);
                          }}
                          style={{ fontSize: 10 }}
                          className={`hover:bg-zinc-800 border-b border-zinc-700 ${
                            activeKey.key === k.key && "bg-zinc-800"
                          } rounded-sm w-full flex items-center p-1 cursor-pointer font-mono justify-between`}
                        >
                          <span>{k.key}</span>
                          {Object.values(k.translations).some(
                            (t) => t === ""
                          ) && (
                            <span className={"text-red-500 font-bold"}>!</span>
                          )}
                        </div>
                      ))}
                  </div>
                </div>
                <div className="h-full flex-grow border-r border-zinc-700">
                  <h1 className="flex items-center justify-center font-bold text-sm border-b border-zinc-800 uppercase font-mono p-1 border-b border-zinc-700">
                    Translation
                  </h1>
                  <div className="p-2 flex flex-col gap-2">
                    {Object.entries(activeKey.translations || {}).map(
                      ([locale, value]) => {
                        return (
                          <TranslationInput
                            key={value as string}
                            locale={locale}
                            value={value}
                            rest={activeKey.translations}
                            id={activeKey.id}
                          />
                        );
                      }
                    )}
                  </div>
                </div>
                <div className="h-full w-72">
                  <h1 className="flex items-center justify-center font-bold text-sm border-b border-zinc-800 uppercase font-mono p-1 border-b border-zinc-700">
                    Usage
                  </h1>
                </div>
              </>
            )}
          </div>
          <div className="flex h-12 w-full border-t border-zinc-700">
            <button onClick={() => generateJson(keys)}>Generate JSON</button>
          </div>
        </div>
      </main>
    </>
  );
}
